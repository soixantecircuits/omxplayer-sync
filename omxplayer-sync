#!/usr/bin/env python
#
# omxplayer-sync
#
# Copyright 2012, Simon Josi
# Simon Josi me(at)yokto(dot)net
#
# This program is free software; you can redistribute 
# it and/or modify it under the terms of the GNU 
# General Public License version 3 as published by 
# the Free Software Foundation.
#

import re
import os
import sys
import math
import socket
import thread
import pexpect
import signal
from time import sleep, time
from threading import local
from optparse import OptionParser, BadOptionError, AmbiguousOptionError

OMXPLAYER = 'omxplayer'
TOLERANCE = 0.2 # mplayer uses 1 s
ADJUST = -0.4 # is that the average transmission time between master and local? is it really useful?
PORT = 1666

REGEX_STATUS = re.compile(r"V :\s*([\d.]+).*")
REGEX_DONE = re.compile(r"have a nice day.*")

global position_local
position_local = 0.0

global position_master
position_master = 0.0

global filename_master
filename_master = ''

class PassThroughOptionParser(OptionParser):
    """
    An unknown option pass-through implementation of OptionParser.

    When unknown arguments are encountered, bundle with largs and try again,
    until rargs is depleted.  

    sys.exit(status) will still be called if a known argument is passed
    incorrectly (e.g. missing arguments or bad argument types, etc.)        
    """
    def _process_args(self, largs, rargs, values):
        while rargs:
            try:
                OptionParser._process_args(self,largs,rargs,values)
            except (BadOptionError,AmbiguousOptionError), e:
                largs.append(e.opt_str)

def read_position_master():
   global position_master
   global filename_master

   sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, 0)
   sock.bind(('0.0.0.0', PORT)) # bind to all network interfaces

   while True:
       # TODO: detect master quit
       data = sock.recvfrom(1024)[0].split('%', 1)
       position_master = float(data[0]) + ADJUST
       filename_master = data[1]

def read_position_local(process, options):
   global position_local
   position_local = 0.0

   while True:
       index = process.expect([
            REGEX_STATUS,
            pexpect.TIMEOUT,
            pexpect.EOF,
            REGEX_DONE,
       ])
       if index == 1: 
           continue
       elif index in (2,3):
           if options.verbose:
               print "omxplayer has ended..."
           position_local = False
           break
       else:
           position_local = float(process.match.group(1)) / 1000000


def play_file(filename, options, omxplayer_options):
    process = pexpect.spawn('%s -s %s %s' % (
        OMXPLAYER, ' '.join(omxplayer_options), filename))

    if options.verbose:
        print "playing %s" % filename

    def kill_process(signum, frame):
       process.kill(15)
       sys.exit(0)
    signal.signal(signal.SIGINT, kill_process)

    global position_local
    thread.start_new_thread(read_position_local, (process,options))

    if options.master:
        # AF_INET is an address family where address is defined by (host, port)
        # SOCK_DGRAM means datagram socket, a connectionless network socket (UDP)
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, 0)
        sock.connect((options.destination, PORT))

    wait_for_sync = False
    # TODO: add timeout while waiting for master message
    while True:
        sleep(0.05) # wait 50 ms, 1 frame at 25 Hz is 40 ms

        if position_local is False:
           position_local = 0.0
           break

        if options.master:
            if options.verbose:
                print "local: %.2f" % position_local
            try:
                sock.send('%s%%%s' % (str(position_local), filename))
            except socket.error:
                pass # pass means nop, no-operation

        if options.slave:
            deviation = position_master - position_local
            if options.verbose: 
                print "local: %.2f master: %.2f deviation: %.2f wait: %r" % (
                    position_local, position_master, deviation, wait_for_sync)

            if wait_for_sync:
                if deviation > 0:
                    # pause
                    process.send('p')
                    wait_for_sync = False
                if position_local < (position_master - TOLERANCE):
                    if options.verbose:
                        print "we are still behind, go ahead..."
                    wait_for_sync = False
                else:
                    sleep(0.05)
                    continue 

            if abs(deviation) > TOLERANCE \
            and filename == filename_master \
            and not position_master == 0.0:
                # TODO: do multiple skip if deviation is high?
                # TODO: do exact seek position
                if deviation > 0: # we are behind
                    if options.verbose:
                        print "skip forward..."
                    process.send('\x1B[C') # right key +30 ms
                elif deviation < 0: # we are ahead
                    if options.verbose:
                        print "skip backwards..."
                    process.send('\x1B[D') # left key -30 ms

                sleep(1)
                process.send('p')
                wait_for_sync = True

def main():
    p = PassThroughOptionParser()
    p.add_option('--master', '-m', action='store_true')
    p.add_option('--slave', '-l', action='store_true')
    p.add_option('--destination', '-x', default='224.0.0.1')
    p.add_option('--loop', '-u', action='store_true')
    p.add_option('--verbose', '-v', action='store_true')
    options, arguments = p.parse_args()

    filenames, omxplayer_options = [], []
    for argument in arguments:
        if argument.startswith('-'):
            omxplayer_options.append(argument)
        else:
            filenames.append(argument)

    if options.slave:
        global position_master
        thread.start_new_thread(read_position_master,())

    while True:
        for filename in filenames:
            play_file(filename, options, omxplayer_options)
        if not options.loop: break

if __name__ == '__main__':
    main()
